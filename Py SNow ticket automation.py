"""
This code was created to automate false alert incidents in ServiceNow related to server connection timed out (generated by Splunk). Since the SLA of the incidents is less, it becomes important to attend to these quickly, but since these are false alerts it creates unnecessary disruptions wasting valuable resources. Recognizing the need for efficiency, this script was created, which is run using a task scheduler to monitor the ServiceNow incidents and automatically run background check to see whether the server is truly down. In the case of false positive alert, the script will ensure proper working of the server, and then close the ticket automatically, saving time and effort of the team. This automation significantly improved productivity, reduced manual ticket handling, minimized SLA and allowed the team to focus on more critical issues. 

We are using the SNow REST API to fetch incident records matching our sysparm_query, then writing the script to execute PowerShell commands to check whether the server is reachable and if it can be reached through remote connection. If a positive response is received to these commands then the script will go ahead and close the ticket with appropriate resolution notes. In case the server is truly down, in that case no action will be taken by the script and the incident will be handled by the team.
"""

#!/usr/bin/env python

#sysparm_query: active=true^short_descriptionSTARTSWITHKB |^assignment_group=679434f053231300e321ddeeff7b12d8

#Need to install requests package for python
import requests		#easy_install requests
import subprocess	#module to run system commands.
import json

# Eg. User name="admin", Password="admin" for this code sample.
user = 'admin'
pwd = 'admin'

# Set proper headers
headers = {"Content-Type":"application/json","Accept":"application/json"}

# Set the request parameters
url = 'https://dev167726.service-now.com/api/now/table/incident?sysparm_query=active%3Dtrue%5Eshort_descriptionSTARTSWITHKB%20%7C%5Eassignment_group%3D679434f053231300e321ddeeff7b12d8&sysparm_fields=short_description%2Csys_id&sysparm_limit=1'

# Do the HTTP request
response = requests.get(url, auth=(user, pwd), headers=headers )

# Check for HTTP codes other than 200
if response.status_code != 200: 
    print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

# Decode the JSON response into a dictionary and use the data
data = response.json()
#print(data)
#print(data['result'][0]['sys_id'])
#print(data['result'][0]['short_description'])

# Extract server name
server = ''
for i in range(5, len(data['result'][0]['short_description'])):
	if data['result'][0]['short_description'][i] == ' ':
		break
	else:
		server += data['result'][0]['short_description'][i]
#print(server)

#check ping connection to server
ping_error = False		#subprocess.call(["ping", "0.0.0.0"])
try:
    subprocess.check_output("ping " + server)		#server = "google.com"
except subprocess.CalledProcessError as e: 
    ping_error = True

#check rdp connection to server
rdp_error = False
try:
    subprocess.check_output("Test-WSMan " + server) #Enter-PSSession -ComputerName <server> -Credential <user id>
except subprocess.CalledProcessError as e:
    rdp_error = True


#close the ticket
if not ping_error and not rdp_error:
	# Set the request parameters
	url = 'https://dev167726.service-now.com/api/now/table/incident/' + data['result'][0]['sys_id']    #315abe2597103110c9953f56f053afac

	# Do the HTTP request
	payload = {"close_code":"No resolution provided","close_notes":"As checked, services are running fine. Hence closing this case.","state":"7"}
		#payload = {"work_notes":"We are working on this."}
	response = requests.patch(url, auth=(user, pwd), headers=headers ,data=json.dumps(payload))

	# Check for HTTP codes other than 200
	if response.status_code != 200: 
    		print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    		exit()
