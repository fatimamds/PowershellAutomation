<#
This is a PowerShell script created to automate false alert incidents in ServiceNow related to server connection timed out (generated by Splunk). Since the SLA of the incidents is less, it becomes important to attend to these quickly, but since these are false alerts it creates unnecessary disruptions wasting valuable resources. Recognizing the need for efficiency, this script was created, which is run using a task scheduler to monitor the ServiceNow incidents and automatically run background check to see whether the server is truly down. In the case of false positive alert, the script will ensure proper working of the server, and then close the ticket automatically, saving time and effort of the team. This automation significantly improved productivity, reduced manual ticket handling, minimized SLA and allowed the team to focus on more critical issues. 

We are using the SNow REST API to fetch incident records matching our sysparm_query, then writing the script to execute PowerShell commands to check whether the server is reachable and if it can be reached through remote connection. If a positive response is received to these commands then the script will go ahead and close the ticket with appropriate resolution notes. In case the server is truly down, in that case no action will be taken by the script and the incident will be handled by the team.
#>

#sysparm_query: active=true^short_descriptionSTARTSWITHKB |^assignment_group=679434f053231300e321ddeeff7b12d8

# Eg. User name="admin", Password="admin" for this code sample.
$user = "admin"
$pass = "admin"

# Build auth header
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

# Set proper headers
$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
$headers.Add('Accept','application/json')
$headers.Add('Content-Type','application/json')

# Specify endpoint uri
$uri = "https://dev167726.service-now.com/api/now/table/incident?sysparm_query=active%3Dtrue%5Eshort_descriptionSTARTSWITHKB%20%7C%5Eassignment_group%3D679434f053231300e321ddeeff7b12d8&sysparm_fields=short_description%2Csys_id&sysparm_limit=1"

# Send HTTP request & print response
$response = Invoke-RestMethod -Headers $headers -Method "get" -Uri $uri 
$response.RawContent

# Extract server name
$server = ($response.result[0].short_description -split '\ ')[2]

# Check ping connection to server
$pingResult = Test-Connection -ComputerName $server -Count 1 -ErrorAction SilentlyContinue

# Check rdp connection to server
$rdpResult = Test-WSMan -ComputerName $server -ErrorAction SilentlyContinue

# Close the ticket
if ($rdpResult -and $pingResult)
{
	# Specify endpoint uri
	$uri = "https://dev167726.service-now.com/api/now/table/incident/" + $response.result[0].sys_id

	# Specify request body, ie payload
	$payload = "{`"close_code`":`"No resolution provided`",`"close_notes`":`"As checked, services are running fine. Hence closing this case.`",`"state`":`"7`"}"

	# Send HTTP request
	$response = Invoke-RestMethod -Headers $headers -Method "patch" -Uri $uri -Body $payload
}
